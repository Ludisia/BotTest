from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from datetime import datetime
from states import RestroomStates

from database import (
    get_available_restroom_slots,
    create_restroom_booking,
    get_user_restroom_bookings,
    cancel_restroom_booking,
    check_restroom_limit,
    get_system_setting
)
from utils import (
    is_valid_time,
    time_to_minutes,
    minutes_to_time,
    format_date
)

router = Router()


@router.message(F.text == "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –∫–æ–º–Ω–∞—Ç—É –æ—Ç–¥—ã—Ö–∞")
async def restroom_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø–∏—Å–∏ –≤ –∫–æ–º–Ω–∞—Ç—É –æ—Ç–¥—ã—Ö–∞"""
    await state.set_state(RestroomStates.choosing_date)
    await message.reply("üìÖ –ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è? (–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì)")


@router.message(RestroomStates.choosing_date)
async def process_restroom_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã"""
    try:
        booking_date = datetime.strptime(message.text, '%d.%m.%Y').date()
        today = datetime.now().date()

        if booking_date < today:
            await message.reply("‚ùå –ù–µ–ª—å–∑—è –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É.")
            return

        available_slots = get_available_restroom_slots(booking_date)
        if not available_slots:
            await state.clear()
            await message.reply("‚ùå –ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –∏ –≥–æ—Ç–æ–≤–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ª–æ—Ç–∞–º–∏
        await state.update_data(booking_date=booking_date.strftime('%Y-%m-%d'))

        builder = ReplyKeyboardBuilder()
        for slot in available_slots:
            builder.add(types.KeyboardButton(text=slot['display']))
        builder.adjust(2)

        await state.set_state(RestroomStates.choosing_start)
        await message.reply(
            "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:",
            reply_markup=builder.as_markup(resize_keyboard=True)
        )

    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")


@router.message(RestroomStates.choosing_start)
async def process_restroom_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞"""
    if not is_valid_time(message.text.split('-')[0]):
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.")
        return

    user_data = await state.get_data()
    booking_date = user_data['booking_date']
    start_time = message.text.split('-')[0]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ "HH:MM-HH:MM"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–∞
    date_obj = datetime.strptime(booking_date, '%Y-%m-%d').date()
    available_slots = get_available_restroom_slots(date_obj)
    slot_available = any(slot['display'] == message.text for slot in available_slots)

    if not slot_available:
        await state.clear()
        await message.reply("‚ùå –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ.", reply_markup=types.ReplyKeyboardRemove())
        return

    await state.update_data(start_time=start_time)

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    builder = ReplyKeyboardBuilder()
    durations = ["30 –º–∏–Ω—É—Ç", "1 —á–∞—Å", "1.5 —á–∞—Å–∞", "2 —á–∞—Å–∞"]
    for duration in durations:
        builder.add(types.KeyboardButton(text=duration))
    builder.adjust(2)

    await state.set_state(RestroomStates.choosing_duration)
    await message.reply(
        "‚è≥ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )


@router.message(RestroomStates.choosing_duration)
async def process_restroom_duration(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    duration_map = {
        "30 –º–∏–Ω—É—Ç": 30,
        "1 —á–∞—Å": 60,
        "1.5 —á–∞—Å–∞": 90,
        "2 —á–∞—Å–∞": 120
    }

    if message.text not in duration_map:
        await message.reply("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    duration = duration_map[message.text]
    user_data = await state.get_data()
    booking_date = user_data['booking_date']
    start_time = user_data['start_time']
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
    can_book, remaining = check_restroom_limit(user_id, duration)
    if not can_book:
        remaining_hours = remaining // 60
        remaining_minutes = remaining % 60
        await message.reply(
            f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –Ω–µ–¥–µ–ª—å–Ω—ã–π –ª–∏–º–∏—Ç. –î–æ—Å—Ç—É–ø–Ω–æ: {remaining_hours}—á {remaining_minutes}–º–∏–Ω.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await state.clear()
        return

    # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
    end_time = minutes_to_time(time_to_minutes(start_time) + duration)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    if create_restroom_booking(
            user_id=user_id,
            booking_date=booking_date,
            start_time=start_time,
            end_time=end_time,
            duration=duration
    ):
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notify_minutes = get_system_setting('restroom_notification_minutes') or 15

        await message.reply(
            f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –∫–æ–º–Ω–∞—Ç—É –æ—Ç–¥—ã—Ö–∞\n"
            f"üìÖ –î–∞—Ç–∞: {format_date(datetime.strptime(booking_date, '%Y-%m-%d'))}\n"
            f"‚è∞ –í—Ä–µ–º—è: {start_time}-{end_time}\n"
            f"‚è≥ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} –º–∏–Ω—É—Ç\n\n"
            f"‚ÑπÔ∏è –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ {notify_minutes} –º–∏–Ω—É—Ç –¥–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø–∏—Å–∏.",
            reply_markup=types.ReplyKeyboardRemove()
        )
    else:
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=types.ReplyKeyboardRemove()
        )

    await state.clear()


@router.callback_query(F.data == "cancel_restroom")
async def cancel_restroom(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –≤ –∫–æ–º–Ω–∞—Ç—É –æ—Ç–¥—ã—Ö–∞"""
    user_id = callback.from_user.id
    bookings = get_user_restroom_bookings(user_id)

    if not bookings:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–ø–∏—Å—è–º–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã
    builder = InlineKeyboardBuilder()
    for booking in bookings:
        builder.button(
            text=f"{booking['booking_date']} {booking['start_time']}-{booking['end_time']}",
            callback_data=f"cancel_restroom_{booking['id']}"
        )
    builder.adjust(1)

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("cancel_restroom_"))
async def process_restroom_cancel(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏"""
    booking_id = int(callback.data.split('_')[2])

    if cancel_restroom_booking(booking_id):
        await callback.message.edit_text(
            "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=None
        )
    else:
        await callback.message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å",
            reply_markup=None
        )

    await callback.answer()


# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
@router.message(Command("restroom_stats"))
async def show_restroom_stats(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–º–Ω–∞—Ç–µ –æ—Ç–¥—ã—Ö–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É
    pass