from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from datetime import datetime
import logging

from database import (
    get_available_machines,
    get_available_laundry_slots,
    create_laundry_booking,
    get_user_laundry_bookings,
    cancel_laundry_booking,
    get_system_setting,
    check_user_daily_bookings
)
from utils import (
    is_valid_time,
    time_to_minutes,
    minutes_to_time,
    format_date
)
from states import LaundryStates

router = Router()

# –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–≤ —á–∞—Å–∞—Ö)
LAUNDRY_MIN_BOOKING_HOURS = 2
logger = logging.getLogger(__name__)


@router.message(F.text == "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –ø—Ä–∞—á–µ—á–Ω—É—é")
async def laundry_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø–∏—Å–∏ –≤ –ø—Ä–∞—á–µ—á–Ω—É—é"""
    available_machines = get_available_machines()
    if not available_machines:
        await message.reply("‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—à–∏–Ω–æ–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏.")
        return

    await state.set_state(LaundryStates.choosing_date)
    await message.reply("üìÖ –ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è? (–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì)")


@router.message(LaundryStates.choosing_date)
async def process_laundry_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã"""
    try:
        booking_date = datetime.strptime(message.text, '%d.%m.%Y').date()
        today = datetime.now().date()

        if booking_date < today:
            await message.reply("‚ùå –ù–µ–ª—å–∑—è –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É.")
            return

        available_machines = get_available_machines()
        if not available_machines:
            await state.clear()
            await message.reply("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—à–∏–Ω–æ–∫.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        await state.update_data(booking_date=booking_date.strftime('%Y-%m-%d'))

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –º–∞—à–∏–Ω–∫–∞–º–∏
        builder = InlineKeyboardBuilder()
        for machine in available_machines:
            builder.button(
                text=f"–ú–∞—à–∏–Ω–∫–∞ ‚Ññ{machine}",
                callback_data=f"machine_{machine}"
            )
        builder.adjust(1)

        await state.set_state(LaundryStates.choosing_machine)
        await message.reply(
            "üåÄ –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—à–∏–Ω–∫—É:",
            reply_markup=builder.as_markup()
        )

    except ValueError:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")


@router.callback_query(F.data.startswith('machine_'), LaundryStates.choosing_machine)
async def process_laundry_machine(callback: types.CallbackQuery, state: FSMContext):
    machine_number = int(callback.data.split('_')[1])
    user_data = await state.get_data()
    booking_date = user_data['booking_date']
    date_obj = datetime.strptime(booking_date, '%Y-%m-%d').date()

    available_slots = get_available_laundry_slots(date_obj, machine_number)

    if not available_slots:
        await callback.message.edit_text(
            "‚ùå –ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–π –º–∞—à–∏–Ω–∫–∏.",
            reply_markup=None
        )
        await state.clear()
        return

    builder = ReplyKeyboardBuilder()
    for slot in available_slots:
        builder.add(types.KeyboardButton(text=slot))
    builder.adjust(2)  # 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥

    await state.update_data(machine_number=machine_number)
    await state.set_state(LaundryStates.choosing_time)
    await callback.message.answer(
        f"‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–ª—è –º–∞—à–∏–Ω–∫–∏ ‚Ññ{machine_number} (—Å–ª–æ—Ç—ã –ø–æ 2 —á–∞—Å–∞):",
        reply_markup=builder.as_markup(resize_keyboard=True, one_time_keyboard=True)
    )
    await callback.answer()
    builder = ReplyKeyboardBuilder()
    for slot in available_slots:
        builder.add(types.KeyboardButton(text=slot))
    builder.adjust(2)

    await callback.answer()


@router.message(LaundryStates.choosing_time)
async def process_laundry_time(message: types.Message, state: FSMContext):
    if not is_valid_time(message.text):
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.")
        return

    user_data = await state.get_data()
    booking_date = user_data['booking_date']
    machine_number = user_data['machine_number']
    start_time = message.text
    date_obj = datetime.strptime(booking_date, '%Y-%m-%d').date()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–ª–æ—Ç–∞
    available_slots = get_available_laundry_slots(date_obj, machine_number)
    if start_time not in available_slots:
        await state.clear()
        await message.reply("‚ùå –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ.", reply_markup=types.ReplyKeyboardRemove())
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∑–∞–ø–∏—Å–µ–π (–Ω–µ –±–æ–ª–µ–µ 2 –≤ –¥–µ–Ω—å)
    if not check_user_daily_bookings(message.from_user.id, booking_date):
        await state.clear()
        await message.reply(
            "‚ùå –£ –≤–∞—Å —É–∂–µ 2 –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å. –û—Ç–º–µ–Ω–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –Ω–∏—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ (2 —á–∞—Å–∞)
    end_time = minutes_to_time(time_to_minutes(start_time) + 120)

    if create_laundry_booking(
            user_id=message.from_user.id,
            machine_number=machine_number,
            booking_date=booking_date,
            start_time=start_time,
            end_time=end_time
    ):
        await message.reply(
            f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –º–∞—à–∏–Ω–∫—É ‚Ññ{machine_number}\n"
            f"üìÖ –î–∞—Ç–∞: {date_obj.strftime('%d.%m.%Y')}\n"
            f"‚è∞ –í—Ä–µ–º—è: {start_time}-{end_time}\n\n"
            f"‚ÑπÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –∏–º–µ—Ç—å –¥–æ 2 –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ –¥–µ–Ω—å.",
            reply_markup=types.ReplyKeyboardRemove()
        )
    else:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.", reply_markup=types.ReplyKeyboardRemove())

    await state.clear()

@router.callback_query(F.data == "cancel_laundry")
async def cancel_laundry(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –≤ –ø—Ä–∞—á–µ—á–Ω—É—é"""
    user_id = callback.from_user.id
    bookings = get_user_laundry_bookings(user_id)

    if not bookings:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–ø–∏—Å—è–º–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã
    builder = InlineKeyboardBuilder()
    for booking in bookings:
        builder.button(
            text=f"–ú–∞—à–∏–Ω–∫–∞ {booking['machine_number']} {booking['booking_date']} {booking['start_time']}",
            callback_data=f"cancel_laundry_{booking['id']}"
        )
    builder.adjust(1)

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data == "cancel_laundry_menu")
async def show_cancel_laundry_menu(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–µ–π –≤ –ø—Ä–∞—á–µ—á–Ω—É—é"""
    user_id = callback.from_user.id
    bookings = get_user_laundry_bookings(user_id)

    if not bookings:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π", show_alert=True)
        return

    builder = InlineKeyboardBuilder()
    for booking in bookings:
        builder.button(
            text=f"–ú–∞—à–∏–Ω–∫–∞ {booking['machine_number']} {booking['booking_date']} {booking['start_time']}",
            callback_data=f"cancel_laundry_{booking['id']}"
        )
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
    builder.adjust(1)

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("cancel_laundry_"))
async def process_laundry_cancel(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏"""
    try:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ ID
        parts = callback.data.split('_')
        if len(parts) != 3:
            raise ValueError("Invalid callback data format")

        booking_id = int(parts[2])

        if cancel_laundry_booking(booking_id):
            await callback.message.edit_text(
                "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞",
                reply_markup=None
            )
        else:
            await callback.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å",
                reply_markup=None
            )
    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", show_alert=True)
    finally:
        await callback.answer()


# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
@router.message(Command("laundry_status"))
async def show_laundry_status(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –º–∞—à–∏–Ω–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É
    pass