from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from datetime import datetime

from database import (
    get_all_machines,
    update_machine_status,
    get_active_bookings,
    get_system_setting,
    update_system_setting,
    is_admin,
    update_schedule_settings
)
from utils import is_valid_time, format_date

router = Router()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
router.message.filter(F.from_user.id.is_(lambda x: is_admin(x)))
router.callback_query.filter(F.from_user.id.is_(lambda x: is_admin(x)))


@router.message(Command("admin"))
async def admin_panel(message: types.Message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    builder = ReplyKeyboardBuilder()
    buttons = [
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—à–∏–Ω–∫–∞–º–∏",
        "–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π",
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
        "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    ]
    for button in buttons:
        builder.add(types.KeyboardButton(text=button))
    builder.adjust(2)

    await message.reply(
        "‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )


@router.message(F.text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—à–∏–Ω–∫–∞–º–∏")
async def manage_machines(message: types.Message):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–º –º–∞—à–∏–Ω–æ–∫"""
    machines = get_all_machines()

    builder = InlineKeyboardBuilder()
    for machine in machines:
        status_icon = "‚úÖ" if machine['status'] == 'active' else "‚ùå"
        builder.button(
            text=f"–ú–∞—à–∏–Ω–∫–∞ {machine['machine_number']} {status_icon}",
            callback_data=f"toggle_machine_{machine['machine_number']}"
        )
    builder.adjust(1)

    await message.reply(
        "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –º–∞—à–∏–Ω–æ–∫:\n"
        "‚úÖ - –¥–æ—Å—Ç—É–ø–Ω–∞\n"
        "‚ùå - –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—à–∏–Ω–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:",
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data.startswith("toggle_machine_"))
async def toggle_machine_status(callback: types.CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–∞—à–∏–Ω–∫–∏"""
    machine_number = int(callback.data.split('_')[2])
    current_status = next(
        (m['status'] for m in get_all_machines()
         if m['machine_number'] == machine_number),
        'active'
    )
    new_status = 'inactive' if current_status == 'active' else 'active'

    if update_machine_status(machine_number, new_status):
        await callback.answer(f"–°—Ç–∞—Ç—É—Å –º–∞—à–∏–Ω–∫–∏ {machine_number} –∏–∑–º–µ–Ω–µ–Ω")
        await manage_machines(callback.message)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")


@router.message(F.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π")
async def view_bookings_menu(message: types.Message):
    """–ú–µ–Ω—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π"""
    builder = InlineKeyboardBuilder()
    builder.button(text="–ü—Ä–∞—á–µ—á–Ω–∞—è", callback_data="view_bookings_laundry")
    builder.button(text="–ö–æ–º–Ω–∞—Ç–∞ –æ—Ç–¥—ã—Ö–∞", callback_data="view_bookings_restroom")
    await message.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data.startswith("view_bookings_"))
async def view_bookings(callback: types.CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π"""
    booking_type = callback.data.split('_')[2]  # laundry –∏–ª–∏ restroom
    bookings = get_active_bookings(booking_type)

    response = (
        "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ –ø—Ä–∞—á–µ—á–Ω—É—é:\n\n" if booking_type == 'laundry' else
        "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ –∫–æ–º–Ω–∞—Ç—É –æ—Ç–¥—ã—Ö–∞:\n\n"
    )

    for booking in bookings:
        if booking_type == 'laundry':
            response += (
                f"üîπ –ú–∞—à–∏–Ω–∫–∞ ‚Ññ{booking['machine_number']}\n"
                f"üìÖ {booking['booking_date']} {booking['start_time']}-{booking['end_time']}\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {booking['username_hash'][:8]}...\n\n"
            )
        else:
            response += (
                f"üîπ {booking['booking_date']} {booking['start_time']}-{booking['end_time']}\n"
                f"‚è≥ {booking['duration']} –º–∏–Ω—É—Ç\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {booking['username_hash'][:8]}...\n\n"
            )

    if not bookings:
        response = "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π"

    builder = InlineKeyboardBuilder()
    builder.button(text="–ù–∞–∑–∞–¥", callback_data="admin_back")
    await callback.message.edit_text(
        response,
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.message(F.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
async def notification_settings(message: types.Message, state: FSMContext):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    settings = {
        'laundry_notification_minutes': "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å—Ç–∏—Ä–∫–æ–π (–º–∏–Ω)",
        'restroom_notification_minutes': "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∫–æ–º–Ω–∞—Ç–æ–π –æ—Ç–¥—ã—Ö–∞ (–º–∏–Ω)",
        'laundry_grace_period': "–ì—Ä–µ–π—Å-–ø–µ—Ä–∏–æ–¥ –ø—Ä–∞—á–µ—á–Ω–æ–π (–º–∏–Ω)"
    }

    builder = InlineKeyboardBuilder()
    for setting, description in settings.items():
        value = get_system_setting(setting) or "30"
        builder.button(
            text=f"{description}: {value}",
            callback_data=f"edit_setting_{setting}"
        )
    builder.adjust(1)

    await message.reply(
        "‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data.startswith("edit_setting_"))
async def edit_setting(callback: types.CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    setting_name = callback.data.split('_')[2]
    current_value = get_system_setting(setting_name) or "30"

    await state.update_data(editing_setting=setting_name)
    await callback.message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è '{setting_name}' (—Ç–µ–∫—É—â–µ–µ: {current_value}):"
    )
    await callback.answer()


@router.message(F.text.regexp(r'^\d+$'))
async def save_setting(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    user_data = await state.get_data()
    if 'editing_setting' not in user_data:
        return

    setting_name = user_data['editing_setting']
    new_value = message.text

    if update_system_setting(setting_name, new_value):
        await message.reply(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ '{setting_name}' –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {new_value}")
    else:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

    await state.clear()


@router.message(F.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–±–æ—Ä –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    await message.reply("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö")


@router.callback_query(F.data == "admin_back")
async def admin_back(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    await admin_panel(callback.message)
    await callback.answer()


@router.message(F.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
async def schedule_settings_menu(message: types.Message):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    builder = InlineKeyboardBuilder()
    buttons = [
        ("–û–±—ã—á–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è", "set_open_time"),
        ("–û–±—ã—á–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è", "set_close_time"),
        ("–ü–µ—Ä–µ—Ä—ã–≤ (–Ω–∞—á–∞–ª–æ)", "set_break_start"),
        ("–ü–µ—Ä–µ—Ä—ã–≤ (–∫–æ–Ω–µ—Ü)", "set_break_end"),
        ("–°—Ä–µ–¥–∞: –≤—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è", "set_wednesday_start"),
        ("–°—Ä–µ–¥–∞: –ø–µ—Ä–µ—Ä—ã–≤ (–Ω–∞—á–∞–ª–æ)", "set_wednesday_break_start"),
        ("–°—Ä–µ–¥–∞: –ø–µ—Ä–µ—Ä—ã–≤ (–∫–æ–Ω–µ—Ü)", "set_wednesday_break_end"),
        ("–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫", "reset_schedule_settings")
    ]

    for text, callback in buttons:
        builder.button(text=text, callback_data=callback)
    builder.adjust(1)

    await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∞—á–µ—á–Ω–æ–π:", reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith("set_"))
async def ask_for_new_time(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    setting_map = {
        'set_open_time': 'laundry_open',
        'set_close_time': 'laundry_close',
        'set_break_start': 'laundry_break_start',
        'set_break_end': 'laundry_break_end',
        'set_wednesday_start': 'wednesday_start',
        'set_wednesday_break_start': 'wednesday_break_start',
        'set_wednesday_break_end': 'wednesday_break_end'
    }

    setting_name = setting_map[callback.data]
    await state.update_data(editing_setting=setting_name)
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è {setting_name} (—Ñ–æ—Ä–º–∞—Ç HH:MM):")
    await callback.answer()


@router.message(F.text.regexp(r'^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$'))
async def save_schedule_setting(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    user_data = await state.get_data()
    if 'editing_setting' not in user_data:
        return

    setting_name = user_data['editing_setting']
    time_value = message.text

    if update_schedule_settings(setting_name, time_value):
        await message.reply(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ '{setting_name}' –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {time_value}")
    else:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

    await state.clear()


@router.callback_query(F.data == "reset_schedule_settings")
async def reset_schedule_settings(callback: types.CallbackQuery):
    """–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    default_settings = {
        'laundry_open': '08:00',
        'laundry_close': '23:00',
        'laundry_break_start': None,
        'laundry_break_end': None,
        'wednesday_start': '08:00',
        'wednesday_break_start': '10:00',
        'wednesday_break_end': '13:00'
    }

    with closing(get_db_connection()) as conn:
        with conn:
            cursor = conn.cursor()
            try:
                for name, value in default_settings.items():
                    cursor.execute('''
                        INSERT OR REPLACE INTO schedule_settings 
                        (setting_name, setting_value) VALUES (?, ?)
                    ''', (name, value))
                await callback.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            except sqlite3.Error:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

    await callback.message.edit_reply_markup()